// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using EvCoOwnership.Repositories.Models;
using EvCoOwnership.Repositories.Enums;

namespace EvCoOwnership.Repositories.Context;

public partial class EvCoOwnershipDbContext : DbContext
{
    public EvCoOwnershipDbContext(DbContextOptions<EvCoOwnershipDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<CheckIn> CheckIns { get; set; }

    public virtual DbSet<CheckOut> CheckOuts { get; set; }

    public virtual DbSet<CoOwner> CoOwners { get; set; }

    public virtual DbSet<Configuration> Configurations { get; set; }

    public virtual DbSet<DrivingLicense> DrivingLicenses { get; set; }

    public virtual DbSet<FileUpload> FileUploads { get; set; }

    public virtual DbSet<Fund> Funds { get; set; }

    public virtual DbSet<FundAddition> FundAdditions { get; set; }

    public virtual DbSet<FundUsage> FundUsages { get; set; }

    public virtual DbSet<FundUsageVote> FundUsageVotes { get; set; }

    public virtual DbSet<MaintenanceCost> MaintenanceCosts { get; set; }

    public virtual DbSet<NotificationEntity> NotificationEntities { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserNotification> UserNotifications { get; set; }

    public virtual DbSet<UserRefreshToken> UserRefreshTokens { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

    public virtual DbSet<VehicleCoOwner> VehicleCoOwners { get; set; }

    public virtual DbSet<VehicleCondition> VehicleConditions { get; set; }

    public virtual DbSet<VehicleStation> VehicleStations { get; set; }

    public virtual DbSet<VehicleVerificationHistory> VehicleVerificationHistories { get; set; }

    public virtual DbSet<VehicleUsageRecord> VehicleUsageRecords { get; set; }

    // Booking Reminder tables
    public virtual DbSet<UserReminderPreference> UserReminderPreferences { get; set; }

    public virtual DbSet<BookingReminderLog> BookingReminderLogs { get; set; }

    // Ownership Change tables
    public virtual DbSet<OwnershipChangeRequest> OwnershipChangeRequests { get; set; }

    public virtual DbSet<OwnershipChangeDetail> OwnershipChangeDetails { get; set; }

    public virtual DbSet<OwnershipChangeApproval> OwnershipChangeApprovals { get; set; }

    // Ownership History table
    public virtual DbSet<OwnershipHistory> OwnershipHistories { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("bookings_pkey");

            entity.ToTable("bookings");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ApprovedBy).HasColumnName("approved_by");
            entity.Property(e => e.CoOwnerId).HasColumnName("co_owner_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.EndTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_time");
            entity.Property(e => e.Purpose)
                .HasMaxLength(500)
                .HasColumnName("purpose");
            entity.Property(e => e.StartTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_time");
            entity.Property(e => e.StatusEnum)
                .HasDefaultValue(EBookingStatus.Pending)
                .HasColumnName("status_enum")
                .HasConversion<int>();
            entity.Property(e => e.TotalCost)
                .HasPrecision(10, 2)
                .HasColumnName("total_cost");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
            entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("bookings_approved_by_fkey");

            entity.HasOne(d => d.CoOwner).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.CoOwnerId)
                .HasConstraintName("bookings_co_owner_id_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.VehicleId)
                .HasConstraintName("bookings_vehicle_id_fkey");
        });

        modelBuilder.Entity<CheckIn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("check_ins_pkey");

            entity.ToTable("check_ins");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BookingId).HasColumnName("booking_id");
            entity.Property(e => e.CheckTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("check_time");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
            entity.Property(e => e.VehicleConditionId).HasColumnName("vehicle_condition_id");
            entity.Property(e => e.VehicleStationId).HasColumnName("vehicle_station_id");

            entity.HasOne(d => d.Booking).WithMany(p => p.CheckIns)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("check_ins_booking_id_fkey");

            entity.HasOne(d => d.Staff).WithMany(p => p.CheckIns)
                .HasForeignKey(d => d.StaffId)
                .HasConstraintName("check_ins_staff_id_fkey");

            entity.HasOne(d => d.VehicleCondition).WithMany(p => p.CheckIns)
                .HasForeignKey(d => d.VehicleConditionId)
                .HasConstraintName("check_ins_vehicle_condition_id_fkey");

            entity.HasOne(d => d.VehicleStation).WithMany(p => p.CheckIns)
                .HasForeignKey(d => d.VehicleStationId)
                .HasConstraintName("check_ins_vehicle_station_id_fkey");
        });

        modelBuilder.Entity<CheckOut>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("check_outs_pkey");

            entity.ToTable("check_outs");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BookingId).HasColumnName("booking_id");
            entity.Property(e => e.CheckTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("check_time");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
            entity.Property(e => e.VehicleConditionId).HasColumnName("vehicle_condition_id");
            entity.Property(e => e.VehicleStationId).HasColumnName("vehicle_station_id");

            entity.HasOne(d => d.Booking).WithMany(p => p.CheckOuts)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("check_outs_booking_id_fkey");

            entity.HasOne(d => d.Staff).WithMany(p => p.CheckOuts)
                .HasForeignKey(d => d.StaffId)
                .HasConstraintName("check_outs_staff_id_fkey");

            entity.HasOne(d => d.VehicleCondition).WithMany(p => p.CheckOuts)
                .HasForeignKey(d => d.VehicleConditionId)
                .HasConstraintName("check_outs_vehicle_condition_id_fkey");

            entity.HasOne(d => d.VehicleStation).WithMany(p => p.CheckOuts)
                .HasForeignKey(d => d.VehicleStationId)
                .HasConstraintName("check_outs_vehicle_station_id_fkey");
        });

        modelBuilder.Entity<CoOwner>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("co_owners_pkey");

            entity.ToTable("co_owners");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("user_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.User).WithOne(p => p.CoOwner)
                .HasForeignKey<CoOwner>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("co_owners_user_id_fkey");
        });

        modelBuilder.Entity<Configuration>(entity =>
        {
            entity.HasKey(e => e.Key).HasName("configurations_pkey");

            entity.ToTable("configurations");

            entity.Property(e => e.Key)
                .HasMaxLength(100)
                .HasColumnName("key");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
            entity.Property(e => e.Value)
                .IsRequired()
                .HasColumnName("value");
        });

        modelBuilder.Entity<DrivingLicense>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("driving_licenses_pkey");

            entity.ToTable("driving_licenses");

            entity.HasIndex(e => e.LicenseNumber, "driving_licenses_license_number_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CoOwnerId).HasColumnName("co_owner_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.ExpiryDate).HasColumnName("expiry_date");
            entity.Property(e => e.IssueDate).HasColumnName("issue_date");
            entity.Property(e => e.IssuedBy)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("issued_by");
            entity.Property(e => e.LicenseImageUrl)
                .HasMaxLength(500)
                .HasColumnName("license_image_url");
            entity.Property(e => e.LicenseNumber)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("license_number");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.CoOwner).WithMany(p => p.DrivingLicenses)
                .HasForeignKey(d => d.CoOwnerId)
                .HasConstraintName("driving_licenses_co_owner_id_fkey");
        });

        modelBuilder.Entity<FileUpload>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("file_uploads_pkey");

            entity.ToTable("file_uploads");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Data)
                .IsRequired()
                .HasColumnName("data");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("file_name");
            entity.Property(e => e.MimeType)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("mime_type");
            entity.Property(e => e.UploadedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnName("uploaded_at");
        });

        modelBuilder.Entity<Fund>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("funds_pkey");

            entity.ToTable("funds");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.CurrentBalance)
                .HasPrecision(15, 2)
                .HasDefaultValueSql("0")
                .HasColumnName("current_balance");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<FundAddition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fund_additions_pkey");

            entity.ToTable("fund_additions");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(15, 2)
                .HasColumnName("amount");
            entity.Property(e => e.CoOwnerId).HasColumnName("co_owner_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.FundId).HasColumnName("fund_id");
            entity.Property(e => e.PaymentMethodEnum)
                .HasColumnName("payment_method_enum")
                .HasConversion<int>();
            entity.Property(e => e.StatusEnum)
                .HasDefaultValue(EFundAdditionStatus.Pending)
                .HasColumnName("status_enum")
                .HasConversion<int>();
            entity.Property(e => e.TransactionId)
                .HasMaxLength(100)
                .HasColumnName("transaction_id");

            entity.HasOne(d => d.CoOwner).WithMany(p => p.FundAdditions)
                .HasForeignKey(d => d.CoOwnerId)
                .HasConstraintName("fund_additions_co_owner_id_fkey");

            entity.HasOne(d => d.Fund).WithMany(p => p.FundAdditions)
                .HasForeignKey(d => d.FundId)
                .HasConstraintName("fund_additions_fund_id_fkey");
        });

        modelBuilder.Entity<FundUsage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fund_usage_pkey");

            entity.ToTable("fund_usage");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(15, 2)
                .HasColumnName("amount");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnName("description");
            entity.Property(e => e.FundId).HasColumnName("fund_id");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(500)
                .HasColumnName("image_url");
            entity.Property(e => e.MaintenanceCostId).HasColumnName("maintenance_cost_id");
            entity.Property(e => e.UsageTypeEnum)
                .HasColumnName("usage_type_enum")
                .HasConversion<int>();

            entity.HasOne(d => d.Fund).WithMany(p => p.FundUsages)
                .HasForeignKey(d => d.FundId)
                .HasConstraintName("fund_usage_fund_id_fkey");

            entity.HasOne(d => d.MaintenanceCost).WithMany(p => p.FundUsages)
                .HasForeignKey(d => d.MaintenanceCostId)
                .HasConstraintName("fund_usage_maintenance_cost_id_fkey");
        });

        modelBuilder.Entity<FundUsageVote>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("fund_usage_votes");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.FundUsageId).HasColumnName("fund_usage_id");
            entity.Property(e => e.IsAgree).HasColumnName("is_agree");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.FundUsage).WithMany()
                .HasForeignKey(d => d.FundUsageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fund_usage_votes_fund_usage_id_fkey");

            entity.HasOne(d => d.User).WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fund_usage_votes_user_id_fkey");
        });

        modelBuilder.Entity<MaintenanceCost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("maintenance_costs_pkey");

            entity.ToTable("maintenance_costs");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BookingId).HasColumnName("booking_id");
            entity.Property(e => e.Cost)
                .HasPrecision(10, 2)
                .HasColumnName("cost");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnName("description");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(500)
                .HasColumnName("image_url");
            entity.Property(e => e.IsPaid)
                .HasDefaultValue(false)
                .HasColumnName("is_paid");
            entity.Property(e => e.MaintenanceTypeEnum)
                .HasColumnName("maintenance_type_enum")
                .HasConversion<int>();
            entity.Property(e => e.OdometerReading).HasColumnName("odometer_reading");
            entity.Property(e => e.ServiceDate).HasColumnName("service_date");
            entity.Property(e => e.ServiceProvider)
                .HasMaxLength(200)
                .HasColumnName("service_provider");
            entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");

            entity.HasOne(d => d.Booking).WithMany(p => p.MaintenanceCosts)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("maintenance_costs_booking_id_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.MaintenanceCosts)
                .HasForeignKey(d => d.VehicleId)
                .HasConstraintName("maintenance_costs_vehicle_id_fkey");
        });

        modelBuilder.Entity<NotificationEntity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("notification_entities_pkey");

            entity.ToTable("notification_entities");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AdditionalDataJson)
                .HasColumnType("jsonb")
                .HasColumnName("additional_data_json");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.NotificationType)
                .IsRequired()
                .HasColumnName("notification_type")
                .HasConversion<string>();
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payments_pkey");

            entity.ToTable("payments");

            entity.HasIndex(e => e.TransactionId, "payments_transaction_id_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(10, 2)
                .HasColumnName("amount");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.FundAdditionId).HasColumnName("fund_addition_id");
            entity.Property(e => e.PaidAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("paid_at");
            entity.Property(e => e.PaymentGateway)
                .HasMaxLength(50)
                .HasColumnName("payment_gateway");
            entity.Property(e => e.StatusEnum)
                .HasDefaultValue(EPaymentStatus.Pending)
                .HasColumnName("status_enum")
                .HasConversion<int>();
            entity.Property(e => e.TransactionId)
                .HasMaxLength(100)
                .HasColumnName("transaction_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.FundAddition).WithMany(p => p.Payments)
                .HasForeignKey(d => d.FundAdditionId)
                .HasConstraintName("payments_fund_addition_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Payments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("payments_user_id_fkey");
        });

        // Role entity configuration removed - roles are now tied directly to User entity

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("users_pkey");

            entity.ToTable("users");

            entity.HasIndex(e => e.Email, "users_email_key").IsUnique();

            entity.HasIndex(e => e.NormalizedEmail, "users_normalized_email_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DateOfBirth).HasColumnName("date_of_birth");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("first_name");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("last_name");
            entity.Property(e => e.NormalizedEmail)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("normalized_email");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password_hash");
            entity.Property(e => e.PasswordSalt)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password_salt");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .HasColumnName("phone");
            entity.Property(e => e.ProfileImageUrl)
                .HasMaxLength(500)
                .HasColumnName("profile_image_url");
            entity.Property(e => e.RoleEnum)
                .HasDefaultValue(EUserRole.CoOwner)
                .HasColumnName("role_enum")
                .HasConversion<int>();
            entity.Property(e => e.StatusEnum)
                .HasDefaultValue(EUserStatus.Active)
                .HasColumnName("status_enum")
                .HasConversion<int>();
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            // User-Role many-to-many relationship configuration removed - roles are now tied directly to User entity
        });

        modelBuilder.Entity<UserNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("user_notifications_pkey");

            entity.ToTable("user_notifications");

            entity.HasIndex(e => new { e.NotificationId, e.UserId }, "user_notifications_notification_id_user_id_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.NotificationId).HasColumnName("notification_id");
            entity.Property(e => e.ReadAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("read_at");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Notification).WithMany(p => p.UserNotifications)
                .HasForeignKey(d => d.NotificationId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("user_notifications_notification_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.UserNotifications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("user_notifications_user_id_fkey");
        });

        modelBuilder.Entity<UserRefreshToken>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("user_refresh_tokens_pkey");

            entity.ToTable("user_refresh_tokens");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("user_id");
            entity.Property(e => e.ExpiresAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("expires_at");
            entity.Property(e => e.RefreshToken)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("refresh_token");

            entity.HasOne(d => d.User).WithOne(p => p.UserRefreshToken)
                .HasForeignKey<UserRefreshToken>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_refresh_tokens_user_id_fkey");
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("vehicles_pkey");

            entity.ToTable("vehicles");

            entity.HasIndex(e => e.LicensePlate, "vehicles_license_plate_key").IsUnique();

            entity.HasIndex(e => e.Vin, "vehicles_vin_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BatteryCapacity)
                .HasPrecision(6, 2)
                .HasColumnName("battery_capacity");
            entity.Property(e => e.Brand)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("brand");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("color");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.DistanceTravelled)
                .HasDefaultValue(0)
                .HasColumnName("distance_travelled");
            entity.Property(e => e.FundId).HasColumnName("fund_id");
            entity.Property(e => e.LicensePlate)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("license_plate");
            entity.Property(e => e.LocationLatitude)
                .HasPrecision(10, 8)
                .HasColumnName("location_latitude");
            entity.Property(e => e.LocationLongitude)
                .HasPrecision(11, 8)
                .HasColumnName("location_longitude");
            entity.Property(e => e.Model)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("model");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("name");
            entity.Property(e => e.PurchaseDate).HasColumnName("purchase_date");
            entity.Property(e => e.PurchasePrice)
                .HasPrecision(15, 2)
                .HasColumnName("purchase_price");
            entity.Property(e => e.RangeKm).HasColumnName("range_km");
            entity.Property(e => e.StatusEnum)
                .HasDefaultValue(EVehicleStatus.Available)
                .HasColumnName("status_enum")
                .HasConversion<int>();
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
            entity.Property(e => e.VerificationStatusEnum)
                .HasDefaultValue(EVehicleVerificationStatus.Pending)
                .HasColumnName("verification_status_enum")
                .HasConversion<int>();
            entity.Property(e => e.Vin)
                .IsRequired()
                .HasMaxLength(17)
                .HasColumnName("vin");
            entity.Property(e => e.WarrantyUntil).HasColumnName("warranty_until");
            entity.Property(e => e.Year).HasColumnName("year");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("vehicles_created_by_fkey");

            entity.HasOne(d => d.Fund).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.FundId)
                .HasConstraintName("vehicles_fund_id_fkey");
        });

        modelBuilder.Entity<VehicleCoOwner>(entity =>
        {
            entity.HasKey(e => new { e.CoOwnerId, e.VehicleId }).HasName("vehicle_co_owners_pkey");

            entity.ToTable("vehicle_co_owners");

            entity.Property(e => e.CoOwnerId).HasColumnName("co_owner_id");
            entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.InvestmentAmount)
                .HasPrecision(15, 2)
                .HasColumnName("investment_amount");
            entity.Property(e => e.OwnershipPercentage)
                .HasPrecision(5, 2)
                .HasColumnName("ownership_percentage");
            entity.Property(e => e.StatusEnum)
                .HasDefaultValue(EContractStatus.Pending)
                .HasColumnName("status_enum")
                .HasConversion<int>();
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.CoOwner).WithMany(p => p.VehicleCoOwners)
                .HasForeignKey(d => d.CoOwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("vehicle_co_owners_co_owner_id_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.VehicleCoOwners)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("vehicle_co_owners_vehicle_id_fkey");
        });

        modelBuilder.Entity<VehicleCondition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("vehicle_conditions_pkey");

            entity.ToTable("vehicle_conditions");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ConditionTypeEnum)
                .HasColumnName("condition_type_enum")
                .HasConversion<int>();
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DamageReported)
                .HasDefaultValue(false)
                .HasColumnName("damage_reported");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.FuelLevel)
                .HasPrecision(5, 2)
                .HasColumnName("fuel_level");
            entity.Property(e => e.OdometerReading).HasColumnName("odometer_reading");
            entity.Property(e => e.PhotoUrls).HasColumnName("photo_urls");
            entity.Property(e => e.ReportedBy).HasColumnName("reported_by");
            entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");

            entity.HasOne(d => d.ReportedByNavigation).WithMany(p => p.VehicleConditions)
                .HasForeignKey(d => d.ReportedBy)
                .HasConstraintName("vehicle_conditions_reported_by_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.VehicleConditions)
                .HasForeignKey(d => d.VehicleId)
                .HasConstraintName("vehicle_conditions_vehicle_id_fkey");
        });

        modelBuilder.Entity<VehicleStation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("vehicle_stations_pkey");

            entity.ToTable("vehicle_stations");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasColumnName("address");
            entity.Property(e => e.ContactNumber)
                .HasMaxLength(20)
                .HasColumnName("contact_number");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.LocationLatitude)
                .HasPrecision(10, 8)
                .HasColumnName("location_latitude");
            entity.Property(e => e.LocationLongitude)
                .HasPrecision(11, 8)
                .HasColumnName("location_longitude");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("name");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<VehicleVerificationHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("vehicle_verification_history_pkey");

            entity.ToTable("vehicle_verification_history");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.ImagesJson)
                .HasColumnType("jsonb")
                .HasColumnName("images_json");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.StaffId).HasColumnName("staff_id");
            entity.Property(e => e.StatusEnum)
                .HasColumnName("status_enum")
                .HasConversion<int>();
            entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");

            entity.HasOne(d => d.Staff).WithMany(p => p.VehicleVerificationHistories)
                .HasForeignKey(d => d.StaffId)
                .HasConstraintName("vehicle_verification_history_staff_id_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.VehicleVerificationHistories)
                .HasForeignKey(d => d.VehicleId)
                .HasConstraintName("vehicle_verification_history_vehicle_id_fkey");
        });

        // Configure UserReminderPreference
        modelBuilder.Entity<UserReminderPreference>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("user_reminder_preferences");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.HoursBeforeBooking).HasColumnName("hours_before_booking");
            entity.Property(e => e.Enabled).HasColumnName("enabled");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.User)
                .WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasIndex(e => e.UserId).IsUnique();
        });

        // Configure BookingReminderLog
        modelBuilder.Entity<BookingReminderLog>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("booking_reminder_logs");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BookingId).HasColumnName("booking_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.SentAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("sent_at");
            entity.Property(e => e.BookingStartTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("booking_start_time");
            entity.Property(e => e.HoursBeforeBooking).HasColumnName("hours_before_booking");
            entity.Property(e => e.Success).HasColumnName("success");
            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(500)
                .HasColumnName("error_message");

            entity.HasOne(d => d.Booking)
                .WithMany()
                .HasForeignKey(d => d.BookingId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.User)
                .WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasIndex(e => new { e.BookingId, e.UserId });
        });

        // Ownership Change Request configuration
        modelBuilder.Entity<OwnershipChangeRequest>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("ownership_change_requests");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");
            entity.Property(e => e.ProposedByUserId).HasColumnName("proposed_by_user_id");
            entity.Property(e => e.Reason)
                .IsRequired()
                .HasMaxLength(1000)
                .HasColumnName("reason");
            entity.Property(e => e.StatusEnum)
                .HasDefaultValue(EOwnershipChangeStatus.Pending)
                .HasColumnName("status_enum")
                .HasConversion<int>();
            entity.Property(e => e.RequiredApprovals).HasColumnName("required_approvals");
            entity.Property(e => e.CurrentApprovals).HasColumnName("current_approvals");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updated_at");
            entity.Property(e => e.FinalizedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finalized_at");

            entity.HasOne(d => d.Vehicle)
                .WithMany()
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.ProposedByUser)
                .WithMany()
                .HasForeignKey(d => d.ProposedByUserId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasIndex(e => e.VehicleId);
            entity.HasIndex(e => e.StatusEnum);
        });

        // Ownership Change Detail configuration
        modelBuilder.Entity<OwnershipChangeDetail>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("ownership_change_details");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.OwnershipChangeRequestId).HasColumnName("ownership_change_request_id");
            entity.Property(e => e.CoOwnerId).HasColumnName("co_owner_id");
            entity.Property(e => e.CurrentPercentage)
                .HasPrecision(5, 2)
                .HasColumnName("current_percentage");
            entity.Property(e => e.ProposedPercentage)
                .HasPrecision(5, 2)
                .HasColumnName("proposed_percentage");
            entity.Property(e => e.CurrentInvestment)
                .HasPrecision(15, 2)
                .HasColumnName("current_investment");
            entity.Property(e => e.ProposedInvestment)
                .HasPrecision(15, 2)
                .HasColumnName("proposed_investment");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            entity.HasOne(d => d.OwnershipChangeRequest)
                .WithMany(ocr => ocr.OwnershipChangeDetails)
                .HasForeignKey(d => d.OwnershipChangeRequestId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.CoOwner)
                .WithMany()
                .HasForeignKey(d => d.CoOwnerId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasIndex(e => e.OwnershipChangeRequestId);
        });

        // Ownership Change Approval configuration
        modelBuilder.Entity<OwnershipChangeApproval>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("ownership_change_approvals");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.OwnershipChangeRequestId).HasColumnName("ownership_change_request_id");
            entity.Property(e => e.CoOwnerId).HasColumnName("co_owner_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.ApprovalStatusEnum)
                .HasDefaultValue(EApprovalStatus.Pending)
                .HasColumnName("approval_status_enum")
                .HasConversion<int>();
            entity.Property(e => e.Comments)
                .HasMaxLength(500)
                .HasColumnName("comments");
            entity.Property(e => e.RespondedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("responded_at");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            entity.HasOne(d => d.OwnershipChangeRequest)
                .WithMany(ocr => ocr.OwnershipChangeApprovals)
                .HasForeignKey(d => d.OwnershipChangeRequestId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.CoOwner)
                .WithMany()
                .HasForeignKey(d => d.CoOwnerId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.User)
                .WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasIndex(e => e.OwnershipChangeRequestId);
            entity.HasIndex(e => new { e.UserId, e.ApprovalStatusEnum });
        });

        // Ownership History configuration
        modelBuilder.Entity<OwnershipHistory>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("ownership_history");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");
            entity.Property(e => e.CoOwnerId).HasColumnName("co_owner_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.OwnershipChangeRequestId).HasColumnName("ownership_change_request_id");
            entity.Property(e => e.PreviousPercentage)
                .HasPrecision(5, 2)
                .HasColumnName("previous_percentage");
            entity.Property(e => e.NewPercentage)
                .HasPrecision(5, 2)
                .HasColumnName("new_percentage");
            entity.Property(e => e.PercentageChange)
                .HasPrecision(5, 2)
                .HasColumnName("percentage_change");
            entity.Property(e => e.PreviousInvestment)
                .HasPrecision(15, 2)
                .HasColumnName("previous_investment");
            entity.Property(e => e.NewInvestment)
                .HasPrecision(15, 2)
                .HasColumnName("new_investment");
            entity.Property(e => e.InvestmentChange)
                .HasPrecision(15, 2)
                .HasColumnName("investment_change");
            entity.Property(e => e.ChangeTypeEnum)
                .HasColumnName("change_type_enum")
                .HasConversion<int>();
            entity.Property(e => e.Reason)
                .HasMaxLength(1000)
                .HasColumnName("reason");
            entity.Property(e => e.ChangedByUserId).HasColumnName("changed_by_user_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");

            entity.HasOne(d => d.Vehicle)
                .WithMany()
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.CoOwner)
                .WithMany()
                .HasForeignKey(d => d.CoOwnerId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.User)
                .WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.OwnershipChangeRequest)
                .WithMany()
                .HasForeignKey(d => d.OwnershipChangeRequestId)
                .OnDelete(DeleteBehavior.SetNull);

            entity.HasOne(d => d.ChangedByUser)
                .WithMany()
                .HasForeignKey(d => d.ChangedByUserId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasIndex(e => e.VehicleId);
            entity.HasIndex(e => e.CoOwnerId);
            entity.HasIndex(e => e.UserId);
            entity.HasIndex(e => e.CreatedAt);
        });

        ConfigureDateTimeConversions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    private void ConfigureDateTimeConversions(ModelBuilder modelBuilder)
    {
        // Convert UTC DateTime to unspecified DateTime for PostgreSQL compatibility
        var dateTimeConverter = new Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<DateTime, DateTime>(
            v => v.Kind == DateTimeKind.Utc ? DateTime.SpecifyKind(v, DateTimeKind.Unspecified) : v,
            v => DateTime.SpecifyKind(v, DateTimeKind.Utc));

        var nullableDateTimeConverter = new Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter<DateTime?, DateTime?>(
            v => v.HasValue && v.Value.Kind == DateTimeKind.Utc ? DateTime.SpecifyKind(v.Value, DateTimeKind.Unspecified) : v,
            v => v.HasValue ? DateTime.SpecifyKind(v.Value, DateTimeKind.Utc) : v);

        // Apply converter to all DateTime properties
        foreach (var entityType in modelBuilder.Model.GetEntityTypes())
        {
            var properties = entityType.ClrType.GetProperties()
                .Where(p => p.PropertyType == typeof(DateTime) || p.PropertyType == typeof(DateTime?));

            foreach (var property in properties)
            {
                if (property.PropertyType == typeof(DateTime))
                {
                    modelBuilder.Entity(entityType.Name).Property(property.Name)
                        .HasConversion(dateTimeConverter);
                }
                else if (property.PropertyType == typeof(DateTime?))
                {
                    modelBuilder.Entity(entityType.Name).Property(property.Name)
                        .HasConversion(nullableDateTimeConverter);
                }
            }
        }
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}